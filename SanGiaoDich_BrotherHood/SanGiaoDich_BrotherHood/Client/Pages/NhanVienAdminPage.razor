@page "/admin/nhanvien"
@layout AdminLayout
@inject HttpClient httpClient
@using SanGiaoDich_BrotherHood.Shared.Models
@inject NavigationManager NavigationManager
@using SanGiaoDich_BrotherHood.Shared.Dto
<style>
    /* Tùy chỉnh thanh tìm kiếm - Nằm về bên trái */
    .d-flex.align-items-center {
        display: flex;
        align-items: center;
        gap: 10px; /* Khoảng cách giữa input và các nút */
        justify-content: flex-start; /* Đưa phần tìm kiếm về bên trái */
        margin-bottom: 15px; /* Khoảng cách với bảng */
    }

        .d-flex.align-items-center input {
            width: 250px;
            padding: 8px 10px;
            font-size: 14px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.075);
            transition: all 0.3s ease;
        }

        .d-flex.align-items-center button {
            background-color: royalblue; /* Màu xanh dương */
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 14px;
            transition: background-color 0.3s ease;
        }

            .d-flex.align-items-center button.btn-primary {
                background-color: royalblue; /* Màu xanh dương */
            }
    /* Tùy chỉnh bảng: màu nền xen kẽ */
    .table-striped-custom tbody tr:nth-child(odd) {
        background-color: #f8f9fa; /* Màu xám nhạt */
    }

    .table-striped-custom tbody tr:nth-child(even) {
        background-color: #ffffff; /* Màu trắng */
    }

    .table-striped-custom th {
        background-color: #343a40; /* Nền màu đen xám */
        color: #ffffff; /* Chữ trắng */
    }

    .table-striped-custom td {
        padding: 12px;
        border-bottom: 1px solid #ddd;
        vertical-align: middle; /* Canh giữa theo chiều dọc */
    }

    .page-item {
        list-style-type: none;
    }

    .page-link {
        display: inline-block;
        text-align: center;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 600;
        border-radius: 0.375rem;
    }

    .pagination .page-item.selected .page-link {
        background-color: #28A745 !important;
        color: white !important;
    }

    .pagination .page-item .page-link:hover {
        background-color: green;
        color: white !important;
    }

    /* Modal */
    .modal-content {
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        background-color: #007bff;
        color: white;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        padding: 12px 20px;
    }

        .modal-header .btn-close {
            background: #fff;
            opacity: 0.5;
        }

    .modal-footer {
        padding: 12px 20px;
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
    }

        .modal-footer button {
            border-radius: 5px;
        }

    .modal-body {
        padding: 15px;
    }

    /* Thêm nhấn mạnh các biểu mẫu */
    input, select, textarea {
        border-radius: 8px;
        border: 1px solid #ccc;
        transition: border 0.3s ease;
        padding: 10px;
        font-size: 16px;
    }

        input:focus, select:focus, textarea:focus {
            border-color: #007bff;
            outline: none;
        }

    /* Nút đóng và button ở các modal */
    .btn-secondary, .btn-primary {
        border-radius: 5px;
        font-size: 16px;
        padding: 8px 15px;
        transition: background-color 0.3s ease;
    }
</style>
<h3>Quản lý nhân viên</h3>

<!-- Thanh tìm kiếm -->
<div class="mb-3 d-flex align-items-center">
    <input @bind="searchKeyword" class="form-control" placeholder="Tìm kiếm nhân viên..." />
    <button class="btn btn-primary" @onclick="OnSearchKeywordChanged">Tìm kiếm</button>
    <button class="btn btn-success" @onclick="ShowAddEmployeeModal">Thêm nhân viên</button>
</div>


<!-- Danh sách nhân viên -->
@if (filteredEmployees == null)
{
    <p>Đang tải dữ liệu...</p>
}
else if (!filteredEmployees.Any())
{
    <p>Không tìm thấy nhân viên nào phù hợp.</p>
}
else
{
    <!-- Danh sách nhân viên -->
    <table class="table table-hover table-striped-custom align-middle text-center">
        <thead>
            <tr>
                <th>Tên đăng nhập</th>
                <th>Họ và tên</th>
                <th>Email</th>
                <th>Số điện thoại</th>
                <th>Trạng thái</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in PagedEmployees)
            {
                <tr>
                    <td>@employee.UserName</td>
                    <td>@employee.FullName</td>
                    <td>@employee.Email</td>
                    <td>@employee.PhoneNumber</td>
                    <td>@(employee.IsDelete == true ? "Bị cấm" : "Hoạt động")</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2">Chỉnh sửa</button>
                        @if (employee.IsDelete == true)
                        {
                            <button class="btn btn-sm btn-success" @onclick="() => OnUnBanAccount(employee.UserName)">Mở khóa</button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-danger" @onclick="() => OnBanAccount(employee.UserName)">Khóa</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <!-- Phân trang -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "") m-2">
                <a class="page-link text-black" aria-label="Previous" @onclick="() => ChangePage(currentPage - 1)">
                    <span aria-hidden="true"><i class="bi bi-caret-left-fill"></i></span>
                </a>
            </li>
            @for (var i = currentPage - 2; i <= currentPage + 2; i++)
            {
                int j = i;
                if (i > 0 && i <= totalPages)
                {
                    <li class="page-item @(currentPage == i ? "selected" : "") m-2">
                        <a class="page-link text-black" @onclick="() => ChangePage(j)">
                            <span>@i</span>
                        </a>
                    </li>
                }
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "") m-2">
                <a class="page-link text-black" aria-label="Next" @onclick="() => ChangePage(currentPage + 1)">
                    <span aria-hidden="true"><i class="bi bi-caret-right-fill"></i></span>
                </a>
            </li>
        </ul>
    </nav>
}

<!-- Modal Thêm Nhân Viên -->
@if (isAddEmployeeModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm nhân viên</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddEmployeeModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Tên đăng nhập</label>
                        <input class="form-control" @bind="newEmployee.UserName" placeholder="Nhập tên đăng nhập" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Mật khẩu</label>
                        <input class="form-control" @bind="newEmployee.Password" type="password" placeholder="Nhập mật khẩu" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Xác nhận mật khẩu</label>
                        <input class="form-control" @bind="newEmployee.ConformPassword" type="password" placeholder="Nhập lại mật khẩu" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Quyền</label>
                        <select class="form-select" @bind="selectedRole">
                            <option value="" disabled selected>Chọn quyền</option>
                            @foreach (var role in roles)
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAddEmployeeModal">Đóng</button>
                    <button class="btn btn-primary" @onclick="AddEmployee" disabled="@string.IsNullOrWhiteSpace(selectedRole)">Thêm</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal Thông Báo -->
@if (isModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p>@modalMessage</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Account> employees;
    private List<Account> filteredEmployees;
    private string searchKeyword = string.Empty;

    // Biến cho modal thêm nhân viên
    private bool isAddEmployeeModalVisible = false;
    private Account newEmployee = new Account();
    private string selectedRole;
    private List<string> roles = new() { "Admin", "Nhân viên" };

    // Biến modal thông báo
    private bool isModalVisible = false;
    private string modalTitle;
    private string modalMessage;

    // Biến cho phân trang
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private List<Account> PagedEmployees;

    public class Account
    {
        public string UserName { get; set; }
        public string FullName { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string Role { get; set; } // Quyền
        public string Password { get; set; }
        public string ConformPassword { get; set; } // Xác nhận mật khẩu
        public bool IsDelete { get; set; }
    }
    public class RegisterDto
    {
        public string UserName { get; set; }
        public string Password { get; set; }
        public string ConformPassword { get; set; }
        public string Role { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        UpdatePages();
    }

    private void UpdatePages()
    {
        var emp = filteredEmployees.ToList();
        totalPages = emp.Any() ? (int)Math.Ceiling((double)emp.Count / pageSize) : 1;
        PagedEmployees = emp.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }


    private void ChangePage(int page)
    {
        currentPage = page;
        UpdatePages();
    }

    private async Task LoadEmployees()
    {
        try
        {
            // Gọi API quản trị viên để lấy tất cả tài khoản
            employees = await httpClient.GetFromJsonAsync<List<Account>>("api/user/GetAccounts");

            if (employees != null && employees.Any())
            {
                filteredEmployees = employees
                    .Where(e => e.Role.Equals("Nhân viên", StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi", $"Không thể tải danh sách nhân viên: {ex.Message}");
        }
    }

    private void OnSearchKeywordChanged()
    {
        if (string.IsNullOrWhiteSpace(searchKeyword))
        {
            filteredEmployees = employees
                .Where(e => e.Role.Equals("Nhân viên", StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            filteredEmployees = employees
                .Where(e => e.Role.Equals("Nhân Viên", StringComparison.OrdinalIgnoreCase) &&
                           ((e.UserName?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (e.FullName?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (e.Email?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (e.PhoneNumber?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false)))
                .ToList();
        }
    }

    private void ShowAddEmployeeModal()
    {
        isAddEmployeeModalVisible = true;
        newEmployee = new Account();
        selectedRole = null;
    }

    private void CloseAddEmployeeModal()
    {
        isAddEmployeeModalVisible = false;
    }

    private async Task AddEmployee()
    {
        try
        {
            // Kiểm tra mật khẩu và xác nhận mật khẩu có khớp không
            if (newEmployee.Password != newEmployee.ConformPassword)
            {
                ShowModal("Lỗi", "Mật khẩu và xác nhận mật khẩu không khớp.");
                return;
            }

            // Tạo đối tượng RegisterDto
            var registerDto = new RegisterDto
                {
                    UserName = newEmployee.UserName,
                    Password = newEmployee.Password,
                    ConformPassword = newEmployee.ConformPassword,
                    Role = selectedRole
                };

            // Gửi yêu cầu đăng ký tài khoản mới
            await httpClient.PostAsJsonAsync("api/admin/RegisterAccount", registerDto);

            ShowModal("Thành công", "Nhân viên mới đã được thêm.");
            await LoadEmployees();
            CloseAddEmployeeModal();
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi", $"Không thể thêm nhân viên: {ex.Message}");
        }
    }
    private async Task OnBanAccount(string username)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync($"api/Admin/BanAccount?username={username}", username);
            if (response.IsSuccessStatusCode)
            {
                ShowModal("Thành công", $"Tài khoản {username} đã bị cấm.");
                await LoadEmployees();
            }
            else
            {
                ShowModal("Lỗi", "Không thể cấm tài khoản này.");
            }
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi", ex.Message);
        }
    }

    private async Task OnUnBanAccount(string username)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync($"api/Admin/UnBanAccount?username={username}", username);
            if (response.IsSuccessStatusCode)
            {
                ShowModal("Thành công", $"Tài khoản {username} đã được mở khóa.");
                await LoadEmployees();
            }
            else
            {
                ShowModal("Lỗi", "Không thể mở khóa tài khoản này.");
            }
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi", ex.Message);
        }
    }

    private void ShowModal(string title, string message)
    {
        modalTitle = title;
        modalMessage = message;
        isModalVisible = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }
    private void GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= totalPages)
        {
            currentPage = pageNumber;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
}
