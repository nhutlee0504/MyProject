@page "/Admin/Account"
@layout AdminLayout
@inject HttpClient httpClient
@using SanGiaoDich_BrotherHood.Shared.Models
<style>
    /* Tùy chỉnh tìm kiếm (input + nút gần nhau) */
    .search-container {
        display: flex;
        align-items: center;
        gap: 10px; /* Khoảng cách giữa input và nút */
        margin-bottom: 20px;
    }

        .search-container input {
            width: 250px;
            border-radius: 5px;
            border: 1px solid #ced4da;
            padding: 5px 10px;
        }

        .search-container button {
            white-space: nowrap;
            background-color: royalblue; /* Màu xanh dương */
            color: #ffffff; /* Chữ trắng */
            border: none;
            padding: 6px 12px;
            border-radius: 5px;
        }

            .search-container button:hover {
                background-color: #218838; /* Xanh lá đậm khi hover */
            }

    /* Tùy chỉnh bảng: màu nền xen kẽ */
    .table-striped-custom tbody tr:nth-child(odd) {
        background-color: #f8f9fa; /* Màu xám nhạt */
    }

    .table-striped-custom tbody tr:nth-child(even) {
        background-color: #ffffff; /* Màu trắng */
    }

    .table-striped-custom th {
        background-color: #343a40; /* Nền màu đen xám */
        color: #ffffff; /* Chữ trắng */
    }

    .table-striped-custom td {
        padding: 12px;
        border-bottom: 1px solid #ddd;
        vertical-align: middle; /* Canh giữa theo chiều dọc */
    }

    .page-item {
        list-style-type: none;
    }

    .page-link {
        display: inline-block;
        text-align: center;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 600;
        border-radius: 0.375rem;
    }

    .pagination .page-item.selected .page-link {
        background-color: #28A745 !important;
        color: white !important;
    }

    .pagination .page-item .page-link:hover {
        background-color: green;
        color: white !important;
    }
</style>
<h3 class="mt-4 mb-4 text-center">Quản lý người dùng</h3>
<div class="search-container">
    <input @bind="searchKeyword" class="form-control" placeholder="Tìm kiếm người dùng..." />
    <button class="btn btn-success" @onclick="OnSearchKeywordChanged">Tìm kiếm</button>
</div>


@if (isModalVisible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                </div>
                <div class="modal-body">
                    @modalMessage
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
}

@if (filteredUsers == null)
{
    <p>Đang tải dữ liệu...</p>
}
else if (!filteredUsers.Any())
{
    <p>Không tìm thấy người dùng nào phù hợp.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-striped-custom align-middle text-center">
            <thead class="table-dark">
                <tr>
                    <th>Tên đăng nhập</th>
                    <th>Họ và tên</th>
                    <th>Email</th>
                    <th>Số điện thoại</th>
                    <th>Trạng thái</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in PagedUsers)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td>@user.FullName</td>
                        <td>@user.Email</td>
                        <td>@user.PhoneNumber</td>
                        <td>@(user.IsDelete == true ? "Bị cấm" : "Hoạt động")</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2">Chỉnh sửa</button>
                            @if (user.IsDelete == true)
                            {
                                <button class="btn btn-sm btn-success" @onclick="() => OnUnBanAccount(user.UserName)">Mở khóa</button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-danger" @onclick="() => OnBanAccount(user.UserName)">Khóa</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Phân trang -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "") m-2">
                <a class="page-link text-black" aria-label="Previous" @onclick="() => ChangePage(currentPage - 1)">
                    <span aria-hidden="true"><i class="bi bi-caret-left-fill"></i></span>
                </a>
            </li>
            @for (var i = currentPage - 2; i <= currentPage + 2; i++)
            {
                int j = i;
                if (i > 0 && i <= totalPages)
                {
                    <li class="page-item @(currentPage == i ? "selected" : "") m-2">
                        <a class="page-link text-black" @onclick="() => ChangePage(j)">
                            <span>@i</span>
                        </a>
                    </li>
                }
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "") m-2">
                <a class="page-link text-black" aria-label="Next" @onclick="() => ChangePage(currentPage + 1)">
                    <span aria-hidden="true"><i class="bi bi-caret-right-fill"></i></span>
                </a>
            </li>
        </ul>
    </nav>
}
@code {
    private List<Account> users = new();
    private List<Account> filteredUsers = new();
    private List<Account> PagedUsers;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;

    private string searchKeyword = string.Empty;
    private bool isModalVisible = false;
    private string modalTitle;
    private string modalMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        UpdatePageAccounts();
    }

    private void UpdatePageAccounts()
    {
        var acc = filteredUsers.ToList();
        totalPages = acc.Any() ? (int)Math.Ceiling((double)acc.Count / pageSize) : 1;
        PagedUsers = acc.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }


    private void ChangePage(int page)
    {
        currentPage = page;
        UpdatePageAccounts();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await httpClient.GetFromJsonAsync<List<Account>>("api/user/GetAccounts");

            users = users.Where(u => u.Role == "Người dùng").ToList();

            filteredUsers = users;
            currentPage = 1;
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi", $"Không thể tải danh sách người dùng: {ex.Message}");
        }
    }

    private void OnSearchKeywordChanged()
    {
        if (string.IsNullOrWhiteSpace(searchKeyword))
        {
            filteredUsers = users;
        }
        else
        {
            filteredUsers = users.Where(u =>
                (u.UserName?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.FullName?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.Email?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.PhoneNumber?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        }

        currentPage = 1; // Reset về trang đầu
    }

    private async Task OnBanAccount(string username)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync($"api/Admin/BanAccount?username={username}", username);
            if (response.IsSuccessStatusCode)
            {
                ShowModal("Thành công", $"Tài khoản {username} đã bị cấm.");
                await LoadUsers();
            }
            else
            {
                ShowModal("Lỗi", "Không thể cấm tài khoản này.");
            }
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi", ex.Message);
        }
    }

    private async Task OnUnBanAccount(string username)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync($"api/Admin/UnBanAccount?username={username}", username);
            if (response.IsSuccessStatusCode)
            {
                ShowModal("Thành công", $"Tài khoản {username} đã được mở khóa.");
                await LoadUsers();
            }
            else
            {
                ShowModal("Lỗi", "Không thể mở khóa tài khoản này.");
            }
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi", ex.Message);
        }
    }

    private void ShowModal(string title, string message)
    {
        modalTitle = title;
        modalMessage = message;
        isModalVisible = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
            currentPage++;
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private void GoToPage(int page)
    {
        currentPage = page;
    }
}
