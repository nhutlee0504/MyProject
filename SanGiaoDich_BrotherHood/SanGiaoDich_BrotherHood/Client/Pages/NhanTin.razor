@page "/NhanTin"
@using SanGiaoDich_BrotherHood.Shared.Models
@inject HttpClient http
@inject IJSRuntime jsruntime
@inject NavigationManager Navigation

<style>
    /* Chat Container */
    .chat-container {
        display: flex;
        flex-direction: row;
        height: 100vh; /* Đảm bảo chiều cao đầy đủ */
    }

    /* Sidebar */
    .sidebar {
        width: 250px;
        background-color: #f4f4f4;
        padding: 20px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        position: relative;
        flex-shrink: 0;
        overflow-y: auto;
    }

    /* Chat Frame */
    .chat-frame {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        background-color: #fff;
        padding: 20px;
        overflow: hidden;
    }

    /* Tạo một container chứa khung chat và tin nhắn */
    .chat-content {
        display: flex;
        flex-direction: column;
        height: 100%; /* Chiều cao đầy đủ */
        overflow: hidden;
    }

    /* Message History */
    .message-history {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        border-radius: 10px;
        background-color: #f9f9f9;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 0; /* Loại bỏ margin giữa message-history và inputs */
        max-height: calc(100vh - 150px); /* Giới hạn chiều cao tin nhắn và không chèn vào phần nhập */
        overflow: auto;
    }

    /* Phần nhập tin nhắn */
    .inputs {
        padding: 10px;
        background-color: #f8f9fa;
        border-top: 1px solid #ddd;
        margin-top: 0; /* Loại bỏ margin trên inputs */
    }

    /* Cải thiện giao diện của input tin nhắn */
    .form-control {
        border-radius: 20px;
        padding: 12px 15px;
        font-size: 14px;
        flex-grow: 1;
        border: none;
    }

        .form-control:focus {
            box-shadow: 0 0 5px rgba(40, 167, 69, 0.5);
        }

    /* Button gửi tin nhắn */
    .btn {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 20px;
        font-size: 16px;
        margin-left: 10px;
        transition: background-color 0.3s ease;
    }

        .btn:hover {
            background-color: #218838;
        }

    /* Đảm bảo không có nội dung bị tràn ra ngoài */
    .message-line {
        display: flex;
        flex-direction: column;
        margin-bottom: 15px;
    }

        .message-line.text-end .message {
            align-self: flex-end;
            background-color: #28a745;
            color: white;
            border-radius: 10px;
            padding: 10px;
        }

        .message-line.text-start .message {
            align-self: flex-start;
            background-color: white;
            color: #28a745;
            border: 1px solid #28a745;
            border-radius: 10px;
            padding: 10px;
        }

    /* Date and Time in message */
    .date {
        font-size: 12px;
        color: #6c757d;
    }

    /* Scrollbar cho phần tin nhắn */
    .message-history::-webkit-scrollbar {
        width: 8px;
    }

    .message-history::-webkit-scrollbar-thumb {
        background-color: #28a745;
        border-radius: 5px;
    }

        .message-history::-webkit-scrollbar-thumb:hover {
            background-color: #1e7e34;
        }

    .message-history::-webkit-scrollbar-track {
        background-color: #f9f9f9;
    }


</style>

<div class="container-fluid mt-2 mb-2">
    <div id="ChatBox" class="chat-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <button class="toggle-sidebar d-md-none" onclick="ToggleSidebar()">&#9776;</button>
            <form>
                <div class="form-group">
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" placeholder="Tìm kiếm..." @bind="searchTerm">
                    </div>
                </div>
            </form>
            <ul class="users-list">
                @foreach (var conversation in filteredConversationList)
                {
                    var otherUser = conversation.Username == username ? conversation.UserGive : conversation.Username;
                    var userInfo = userInfoCache.ContainsKey(otherUser) ? userInfoCache[otherUser] : ("default-image.png", "Unknown User");

                    <li class="list-group-item user-profile conversation-item d-flex align-items-center @(selectedUser == conversation.Username ? "active" : "")"
                        @onclick="() => { LoadMessages(conversation); HideSidebar(); }">
                        <div class="user-avatar me-3">
                            <img src="@userInfo.Item1" alt="User Image" class="rounded-circle" style="width: 60px; height: 60px; object-fit: cover;" />
                        </div>

                        <div class="d-flex flex-column">
                            <strong class="user-name">
                                @userInfo.Item2
                            </strong>
                        </div>
                    </li>
                }
            </ul>
        </div>

        <!-- Chat Frame -->
        <div class="chat-frame">
            <button class="toggle-sidebar d-md-none" onclick="ToggleSidebar()">&#9776;</button>
            <div class="action-frame d-flex align-items-center">
                <div class="user-avatar me-3">
                    <img src="@selectedUserImage" alt="User Avatar" class="rounded-circle" style="width: 60px; height: 60px; object-fit: cover;" />
                </div>
                <div class="d-flex flex-column">
                    <strong class="user-name">@selectedUser</strong>
                </div>
            </div>

            <!-- Chat Content (Tin nhắn và khung nhập tin nhắn) -->
            <div class="chat-content">
                <!-- Message History -->
                <div class="message-history">
                    @if (messageList.Any())
                    {
                        @foreach (var message in messageList)
                        {
                            <div class="message-line d-flex flex-column @(message.UserSend == username ? "text-end" : "text-start")">
                                <p class="message">
                                    @message.Content
                                    <small class="date d-block mt-1" style="color:white">
                                        @message.CreatedDate.ToString("HH:mm dd/MM/yyyy")
                                    </small>
                                </p>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-center">Chưa có tin nhắn nào.</p>
                    }
                </div>

                <!-- Input Area -->
                <div class="inputs mt-auto">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Nhập tin nhắn..." @bind="messageContent">
                        <button class="btn send-btn" @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(selectedUser)">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    function ToggleSidebar() {
        const chatBox = document.getElementById('ChatBox');
        chatBox.classList.toggle('sidebar-visible');
    }


    function HideSidebar() {
        const chatBox = document.getElementById('ChatBox');
        chatBox.classList.remove('sidebar-visible');
    }
</script>



@code{
    private string searchTerm = string.Empty; 
    private string selectedFilter = string.Empty;
    private List<Conversation> filteredConversationList = new();
    private string productName;

    private bool isLoading = true;
    private string errorMessage;
    private AccountInfoDto accountInfo;
    private bool IsLoggedIn { get; set; } = false;
    private List<Conversation> conversationList = new();
    private List<Messages> messageList = new();
    private string username;
    private string selectedUserImage;
    private string selectedUser;
    private string messageContent;
    private System.Timers.Timer refreshTimer;
    protected override async Task OnInitializedAsync()
    {
        await CheckTokenAndLoadAccountInfo();
        if (IsLoggedIn)
        {
            await LoadConversations();
            filteredConversationList = conversationList;
            StartAutoRefresh(); // Khởi động cơ chế tự động làm mới
        }
    }

    private void HideSidebar()
    {
        // Gọi JavaScript để ẩn sidebar
        jsruntime.InvokeVoidAsync("ToggleSidebar");
    }

    // Các phương thức và biến khác như LoadMessages, messageList...
    // Hàm kiểm tra token và tải thông tin người dùng
    private async Task CheckTokenAndLoadAccountInfo()
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await LoadAccountInfo();
        }
        else
        {
            isLoading = false;
            IsLoggedIn = false;
        }
    }
    private async Task LoadAccountInfo()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await http.GetAsync("api/User/GetMyInfo");

            if (response.IsSuccessStatusCode)
            {
                accountInfo = await response.Content.ReadFromJsonAsync<AccountInfoDto>();
                username = accountInfo.UserName;
                IsLoggedIn = true;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Lỗi: {response.StatusCode} - {errorContent}";
                IsLoggedIn = false;
                await Logout();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra khi lấy thông tin tài khoản: " + ex.Message;
            IsLoggedIn = false;
        }
        finally
        {
            isLoading = false;
        }
    }
    private Dictionary<string, (string Image, string FullName)> userInfoCache = new();

    private async Task LoadConversations()
    {
        try
        {

            conversationList = await http.GetFromJsonAsync<List<Conversation>>($"api/Conversation/GetConversations/{username}");

            foreach (var conversation in conversationList)
            {

                var otherUser = conversation.Username == username ? conversation.UserGive : conversation.Username;

     
                if (!userInfoCache.ContainsKey(otherUser))
                {
                    var (image, fullName) = await GetUserInfoFromAccount(otherUser);

                    // Lưu vào cache
                    userInfoCache[otherUser] = (image, fullName);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải danh sách hội thoại: {ex.Message}");
        }
    }

    private async Task<(string Image, string FullName)> GetUserInfoFromAccount(string username)
    {
        try
        {
            var response = await http.GetAsync($"api/User/GetAccountInfoByName/{username}");
            if (response.IsSuccessStatusCode)
            {
                var account = await response.Content.ReadFromJsonAsync<Account>();
                var image = account?.ImageAccount ?? "default-image.png";
                var fullName = account?.FullName ?? "Unknown User"; 
                return (image, fullName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi lấy thông tin cho {username}: {ex.Message}");
        }
        return ("default-image.png", "Unknown User");
    }

    public class Account
    {
        public string Username { get; set; }
        public string ImageAccount { get; set; }
        public string FullName { get; set; }  // Thêm thuộc tính FullName
    }

    private async Task LoadMessages(Conversation conversation)
    {
        try
        {
            // Xác định người dùng được chọn
            selectedUser = conversation.Username == username ? conversation.UserGive : conversation.Username;

            // Lấy thông tin ảnh từ userInfoCache
            if (userInfoCache.ContainsKey(selectedUser))
            {
                selectedUserImage = userInfoCache[selectedUser].Image;
            }
            else
            {
                // Nếu chưa có trong cache, tải thông tin người dùng
                var userInfo = await GetUserInfoFromAccount(selectedUser);
                selectedUserImage = userInfo.Image;
                userInfoCache[selectedUser] = userInfo; // Cập nhật vào cache
            }

            // Tải danh sách tin nhắn
            var url = $"api/Message/GetMessagesBetween?username={username}&selectedUser={selectedUser}";
            messageList = await http.GetFromJsonAsync<List<Messages>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải tin nhắn: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        try
        {
            var conversation = conversationList.FirstOrDefault(c =>
                (c.Username == username && c.UserGive == selectedUser) ||
                (c.Username == selectedUser && c.UserGive == username));

            if (conversation == null || conversation.ConversationID <= 0)
            {
                Console.WriteLine("Không tìm thấy hội thoại hoặc ConversationID không hợp lệ.");
                return;
            }

            var newMessage = new Messages
                {
                    ConversationID = conversation.ConversationID,
                    UserSend = username,
                    Content = messageContent,
                    TypeContent = "Text",
                    CreatedDate = DateTime.Now,
                    IsDeleted = false,
                    Status = "Sent",
                };

            var response = await http.PostAsJsonAsync($"api/Message/CreateMess?username={username}&userGive={selectedUser}", newMessage);

            if (response.IsSuccessStatusCode)
            {
                await LoadMessages(conversation);
                messageContent = string.Empty;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Gửi tin nhắn thất bại: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi gửi tin nhắn: {ex.Message}");
        }
    }

    private void StartAutoRefresh()
    {
        refreshTimer = new System.Timers.Timer(3000); // 3 giây
        refreshTimer.Elapsed += async (sender, e) => await RefreshData();
        refreshTimer.AutoReset = true;
        refreshTimer.Start();
    }

    private async Task RefreshData()
    {
        await InvokeAsync(async () =>
        {
            await LoadConversations();
            if (!string.IsNullOrEmpty(selectedUser)) 
            {
                var selectedConversation = conversationList.FirstOrDefault(c =>
                    (c.Username == username && c.UserGive == selectedUser) ||
                    (c.Username == selectedUser && c.UserGive == username));
                if (selectedConversation != null)
                {
                    await LoadMessages(selectedConversation);
                }
            }
            StateHasChanged(); // Cập nhật UI
        });
    }

    public void Dispose()
    {
        if (refreshTimer != null)
        {
            refreshTimer.Stop();
            refreshTimer.Dispose();
        }
    }

    private async Task Logout()
    {
        await jsruntime.InvokeVoidAsync("localStorage.removeItem", "token");
        IsLoggedIn = false;
        accountInfo = null;
        Navigation.NavigateTo("/", forceLoad: true);
    }

    private class AccountInfoDto
    {
        public string UserName { get; set; }
        public decimal PreSystem { get; set; }
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string Gender { get; set; }
        public DateTime? Birthday { get; set; }
        public string ImageAccount { get; set; }
    }
}